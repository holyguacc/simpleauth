// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: post.sql

package db

import (
	"context"
	"time"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
  id, 
  title,
  post_description,
  author_name,
  post_date
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, title, post_description, author_name, post_date
`

type CreatePostParams struct {
	ID              string    `json:"id"`
	Title           string    `json:"title"`
	PostDescription string    `json:"post_description"`
	AuthorName      string    `json:"author_name"`
	PostDate        time.Time `json:"post_date"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.ID,
		arg.Title,
		arg.PostDescription,
		arg.AuthorName,
		arg.PostDate,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.PostDescription,
		&i.AuthorName,
		&i.PostDate,
	)
	return i, err
}

const getPost = `-- name: GetPost :one
SELECT id, title, post_description, author_name, post_date FROM posts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPost(ctx context.Context, id string) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.PostDescription,
		&i.AuthorName,
		&i.PostDate,
	)
	return i, err
}

const listPosts = `-- name: ListPosts :many
SELECT id, title, post_description, author_name, post_date FROM posts
ORDER BY post_date
`

func (q *Queries) ListPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, listPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.PostDescription,
			&i.AuthorName,
			&i.PostDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: verify.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const getResetKey = `-- name: GetResetKey :one
SELECT username, is_verified, verify_key, verefied_on, reset_key, reset_on, is_reset FROM verification
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetResetKey(ctx context.Context, username string) (Verification, error) {
	row := q.db.QueryRowContext(ctx, getResetKey, username)
	var i Verification
	err := row.Scan(
		&i.Username,
		&i.IsVerified,
		&i.VerifyKey,
		&i.VerefiedOn,
		&i.ResetKey,
		&i.ResetOn,
		&i.IsReset,
	)
	return i, err
}

const getVerifyKey = `-- name: GetVerifyKey :one
SELECT username, is_verified, verify_key, verefied_on, reset_key, reset_on, is_reset FROM verification
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetVerifyKey(ctx context.Context, username string) (Verification, error) {
	row := q.db.QueryRowContext(ctx, getVerifyKey, username)
	var i Verification
	err := row.Scan(
		&i.Username,
		&i.IsVerified,
		&i.VerifyKey,
		&i.VerefiedOn,
		&i.ResetKey,
		&i.ResetOn,
		&i.IsReset,
	)
	return i, err
}

const getverificationStatus = `-- name: GetverificationStatus :one
SELECT is_verified FROM verification
WHERE username =$1 LIMIT 1
`

func (q *Queries) GetverificationStatus(ctx context.Context, username string) (sql.NullBool, error) {
	row := q.db.QueryRowContext(ctx, getverificationStatus, username)
	var is_verified sql.NullBool
	err := row.Scan(&is_verified)
	return is_verified, err
}

const setResetKeyAndState = `-- name: SetResetKeyAndState :exec
UPDATE verification SET reset_key = $2 , is_reset = $3 WHERE username = $1
`

type SetResetKeyAndStateParams struct {
	Username string         `json:"username"`
	ResetKey sql.NullString `json:"reset_key"`
	IsReset  sql.NullBool   `json:"is_reset"`
}

func (q *Queries) SetResetKeyAndState(ctx context.Context, arg SetResetKeyAndStateParams) error {
	_, err := q.db.ExecContext(ctx, setResetKeyAndState, arg.Username, arg.ResetKey, arg.IsReset)
	return err
}

const setVeriftyStatues = `-- name: SetVeriftyStatues :exec
UPDATE  verification SET is_verified = $2 , verefied_on =$3 WHERE username = $1
`

type SetVeriftyStatuesParams struct {
	Username   string       `json:"username"`
	IsVerified sql.NullBool `json:"is_verified"`
	VerefiedOn time.Time    `json:"verefied_on"`
}

func (q *Queries) SetVeriftyStatues(ctx context.Context, arg SetVeriftyStatuesParams) error {
	_, err := q.db.ExecContext(ctx, setVeriftyStatues, arg.Username, arg.IsVerified, arg.VerefiedOn)
	return err
}

const setVerifyCode = `-- name: SetVerifyCode :exec
INSERT INTO verification (verify_key,username) VALUES ($1,$2)
`

type SetVerifyCodeParams struct {
	VerifyKey string `json:"verify_key"`
	Username  string `json:"username"`
}

func (q *Queries) SetVerifyCode(ctx context.Context, arg SetVerifyCodeParams) error {
	_, err := q.db.ExecContext(ctx, setVerifyCode, arg.VerifyKey, arg.Username)
	return err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE users SET hashed_password = $2 , password_changed_at = $3 WHERE username = $1
`

type UpdatePasswordParams struct {
	Username          string    `json:"username"`
	HashedPassword    string    `json:"hashed_password"`
	PasswordChangedAt time.Time `json:"password_changed_at"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.ExecContext(ctx, updatePassword, arg.Username, arg.HashedPassword, arg.PasswordChangedAt)
	return err
}
